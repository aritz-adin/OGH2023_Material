[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "OpenGeoHub Summer School 2023",
    "section": "",
    "text": "https://opengeohub.org/summer-school/opengeohub-summer-school-poznan-2023/"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "This is a Quarto website.\nTo learn more about Quarto websites visit https://quarto.org/docs/websites.\nThe content below was rendered from README.qmd in the aritz-adin/OGH2023_Material GitHub repository where you can find the source code for this website."
  },
  {
    "objectID": "index.html#opengeohub-foundation",
    "href": "index.html#opengeohub-foundation",
    "title": "OpenGeoHub Summer School 2023",
    "section": "",
    "text": "Enlaces de interés:\n\nOpenGeoHub video portal (IB AV-Portal)\nYoutube channel\n\nLibros online sobre Geocomputation con R, Python y Julia:\n\nR books: Geocomputation with R, Spatial Data Science, Geographic Data Science with R\nPython books: Geocomputation with Python, Introduction to Python for Geographic Data Analysis, Geographic Data Science with Python\nJulia video: JuliaGeo: a gentle introduction"
  },
  {
    "objectID": "index.html#summer-school-2023-processing-and-visualizing-large-geospatial-data-using-r-python-and-julia",
    "href": "index.html#summer-school-2023-processing-and-visualizing-large-geospatial-data-using-r-python-and-julia",
    "title": "OpenGeoHub Summer School 2023",
    "section": "Summer School 2023: “Processing and visualizing large geospatial data using R, Python and Julia”",
    "text": "Summer School 2023: “Processing and visualizing large geospatial data using R, Python and Julia”\n\n\nTidy geographic data with sf, dplyr, ggplot2, geos and friends (Robin Lovelace)\n\nAbstract:\nThis lecture will provide an introduction to working with geographic data using R in a ‘tidy’ way. It will focus on using the sf package to read, write, manipulate, and plot geographic data in combination with the tidyverse metapackage. Why use the sf package with the tidyverse? The lecture will outline some of the ideas underlying the tidyverse and how they can speed-up data analysis pipelines, while making data analysis code easier to read and write. We will see how the following lines\n\nlibrary(sf)\nlibrary(tidyverse)\n\ncan provide a foundation on which the many geographic data analysis problems can be solved. The lecture will also cover on more recently developed packages that integrate with the tidyverse to a greater and lesser extent. We will look at how the geos package, which provides a simple and high-performance interface to the GEOS library for performing geometric operations on geographic data, integrates with the tidyverse. The tidyverse is not the right tool for every data analysis task and we touch on alternatives for working with raster data, with reference to the terra package, and alternative frameworks such as data.table. Finally, we will also look at how the ‘tidy’ philosophy could be implemented in other programming languages, such as Python.\nThe focus throughout will be on practical skills and using packages effectively within the wider context of project management tools, integrated development environments (we recommend VS Code with appropriate extensions or RStudio), and version control systems.\nMaterial del curso: https://ogh23.robinlovelace.net/\nGitHub repository: https://github.com/robinlovelace/opengeohub2023\nEnlace a la grabación en Youtube: parte 1, parte 2\n\n\n\nRaster and vector data cubes in R (Edzer Pebesma)\n\nAbstract:\nA common challenge with raster datasets is not only that they come in large files (single Sentinel-2 tiles are around 1 GB), but that many of these files, potentially thousands or millions, are needed to address the area and time period of interest. In 2022, Copernicus, the program that runs all Sentinel satellites, published 160 TB of images per day. This means that a classic pattern in using R consisting of downloading data to local disc, loading the data in memory, and analysing it is not going to work. This lectures describes how large spatial and spatiotemporal datasets can be handled with R, with a focus on packages sf and stars.\nFor practical use, we classify large datasets as too large:\n\nto fit in working memory,\nto fit on the local hard drive, or\nto download to locally managed infrastructure (such as network attached storage)\n\nThese three categories may (today) correspond very roughly to Gigabyte-, Terabyte- and Petabyte-sized datasets. Besides size considerations, access and processing speed also play a role, in particular for larger datasets or interactive applications. Cloud native geospatial formats are formats optimised with processing on cloud infrastructure in mind, where costs of computing and storage need to be considered and optimised.\nMaterial del curso: https://edzer.github.io/OGH23/dc.html / R book\n\n\n\nGitHub repository: https://github.com/edzer/OGH23\nEnlace a la grabación en Youtube: parte 1, parte 2"
  },
  {
    "objectID": "index.html#tidy-geographic-data-with-sf-dplyr-ggplot2-geos-and-friends-robin-lovelace",
    "href": "index.html#tidy-geographic-data-with-sf-dplyr-ggplot2-geos-and-friends-robin-lovelace",
    "title": "OpenGeoHub Summer School 2023",
    "section": "Tidy geographic data with sf, dplyr, ggplot2, geos and friends (Robin Lovelace)",
    "text": "Tidy geographic data with sf, dplyr, ggplot2, geos and friends (Robin Lovelace)\nThis lecture will provide an introduction to working with geographic data using R in a ‘tidy’ way. It will focus on using the sf package to read, write, manipulate, and plot geographic data in combination with the tidyverse metapackage. Why use the sf package with the tidyverse? The lecture will outline some of the ideas underlying the tidyverse and how they can speed-up data analysis pipelines, while making data analysis code easier to read and write. We will see how the following lines\n\nlibrary(sf)\nlibrary(tidyverse)\n\ncan provide a foundation on which the many geographic data analysis problems can be solved. The lecture will also cover on more recently developed packages that integrate with the tidyverse to a greater and lesser extent. We will look at how the geos package, which provides a simple and high-performance interface to the GEOS library for performing geometric operations on geographic data, integrates with the tidyverse. The tidyverse is not the right tool for every data analysis task and we touch on alternatives for working with raster data, with reference to the terra package, and alternative frameworks such as data.table. Finally, we will also look at how the ‘tidy’ philosophy could be implemented in other programming languages, such as Python.\nThe focus throughout will be on practical skills and using packages effectively within the wider context of project management tools, integrated development environments (we recommend VS Code with appropriate extensions or RStudio), and version control systems.\nMaterial del curso: https://ogh23.robinlovelace.net/tidy\nGitHub repository: https://github.com/robinlovelace/opengeohub2023\nEnlace a la grabación en Youtube: parte 1, parte 2"
  },
  {
    "objectID": "index.html#raster-and-vector-data-cubes-in-r-edzer-pebesma",
    "href": "index.html#raster-and-vector-data-cubes-in-r-edzer-pebesma",
    "title": "OpenGeoHub Summer School 2023",
    "section": "Raster and vector data cubes in R (Edzer Pebesma)",
    "text": "Raster and vector data cubes in R (Edzer Pebesma)\nA common challenge with raster datasets is not only that they come in large files (single Sentinel-2 tiles are around 1 GB), but that many of these files, potentially thousands or millions, are needed to address the area and time period of interest. In 2022, Copernicus, the program that runs all Sentinel satellites, published 160 TB of images per day. This means that a classic pattern in using R consisting of downloading data to local disc, loading the data in memory, and analysing it is not going to work. This lectures describes how large spatial and spatiotemporal datasets can be handled with R, with a focus on packages sf and stars.\nFor practical use, we classify large datasets as too large:\n\nto fit in working memory,\nto fit on the local hard drive, or\nto download to locally managed infrastructure (such as network attached storage)\n\nThese three categories may (today) correspond very roughly to Gigabyte-, Terabyte- and Petabyte-sized datasets. Besides size considerations, access and processing speed also play a role, in particular for larger datasets or interactive applications. Cloud native geospatial formats are formats optimised with processing on cloud infrastructure in mind, where costs of computing and storage need to be considered and optimised.\nMaterial del curso: https://edzer.github.io/OGH23/dc.html / R book\nGitHub repository: https://github.com/edzer/OGH23\nEnlace a la grabación en Youtube: parte 1, parte 2"
  },
  {
    "objectID": "OGH_Foundation.html",
    "href": "OGH_Foundation.html",
    "title": "OpenGeoHub Foundation",
    "section": "",
    "text": "Enlaces de interés:\n\nhttps://opengeohub.org\nOpenGeoHub video portal (IB AV-Portal)\nYoutube channel\n\nLibros online sobre Geocomputation con R, Python y Julia:\n\nR books: Geocomputation with R, Spatial Data Science, Geographic Data Science with R\nPython books: Geocomputation with Python, Introduction to Python for Geographic Data Analysis, Geographic Data Science with Python\nJulia video: JuliaGeo: a gentle introduction"
  },
  {
    "objectID": "OGH_Foundation.html#opengeohub-foundation",
    "href": "OGH_Foundation.html#opengeohub-foundation",
    "title": "OpenGeoHub Foundation",
    "section": "",
    "text": "Enlaces de inter�s:\n\nOpenGeoHub video portal (IB AV-Portal)\nYoutube channel\n\nLibros online sobre Geocomputation con R, Python y Julia:\n\nR books: Geocomputation with R, Spatial Data Science, Geographic Data Science with R\nPython books: Geocomputation with Python, Introduction to Python for Geographic Data Analysis, Geographic Data Science with Python\nJulia video: JuliaGeo: a gentle introduction"
  },
  {
    "objectID": "index.html#unsupervised-classification-clustering-of-satellite-images-with-r-krzysztof-dyba",
    "href": "index.html#unsupervised-classification-clustering-of-satellite-images-with-r-krzysztof-dyba",
    "title": "OpenGeoHub Summer School 2023",
    "section": "Unsupervised classification (clustering) of satellite images with R (Krzysztof Dyba)",
    "text": "Unsupervised classification (clustering) of satellite images with R (Krzysztof Dyba)\nUnsupervised classification of satellite images is the process of grouping similar pixels on an image into homogeneous clusters based primarily on their spectral characteristics. This approach does not require reference (labeled) data, unlike supervised classification, therefore it can be used as a method of first choice. Satellite image classification is commonly used in a variety of fields, including environmental monitoring, land cover mapping, and disaster management. The generated thematic maps can be used to identify and monitor changes in land use, and assess the impact of natural disasters.\nDuring this workshop, participants will gain practical knowledge and skills to perform unsupervised classification of Landsat data using the R language. It will be demonstrated step by step how to use and prepare raster data for analysis, popular grouping methods will be discussed and finally we will prepare a land cover map with interpretation of the results. The workshop will also cover the challenges and limitations of unsupervised classification, such as subjective interpretation of results difficulty of selecting the optimal number of clusters, and validation methods for ensuring the accuracy and reliability of results.\nThe workshop is aimed at beginners, but basic knowledge of GIS and satellite remote sensing is required.\nMaterial del curso: https://kadyb.github.io/OGH2023/\nGitHub repository: https://github.com/kadyb/OGH2023\nEnlace a la grabación en Youtube: parte 1, parte 2"
  },
  {
    "objectID": "index.html#introduction-to-working-with-spatial-data-in-python-michael-dorman",
    "href": "index.html#introduction-to-working-with-spatial-data-in-python-michael-dorman",
    "title": "OpenGeoHub Summer School 2023",
    "section": "Introduction to working with spatial data in Python (Michael Dorman)",
    "text": "Introduction to working with spatial data in Python (Michael Dorman)\nPython is an extremely popular general-purpose programming language. It is used in a wide range of settings and for various purposes, including for spatial data processing and analysis.\nThe aim of this tutorial is to give an introduction to methods of working with spatial data using Python. The tutorial will be split into two parts, introducing two central Python packages:\n\ngeopandas---For working with vector layers\nrasterio---For working with rasters\n\nThe tutorial will demonstrate typical basic workflows of processing spatial data: data input, processing, geo-computation, and exporting of the results. We will use realistic datasets, such as GTFS public transport data and remote sensing products.\nBy the end of the tutorial, the participants will be able to:\n\nImport spatial data from files\nSubset and process the data\nGraphically display the data\nPerform spatial calculations (such as calculating distances, or applying raster algebra operators)\nExport the results\n\nTo follow along and reproduce the results on your own computer, the prerequisite is to be able to run Python code in a Jupyter Notebook interface, linked to a Python environment with the two above-mentioned packages installed. Instructions will be sent in advance.\nMaterial del curso: https://geobgu.xyz/presentations/p_2023_ogh/"
  },
  {
    "objectID": "index.html#processing-geospatial-data-using-juliageo-framework-marteen-pronk",
    "href": "index.html#processing-geospatial-data-using-juliageo-framework-marteen-pronk",
    "title": "OpenGeoHub Summer School 2023",
    "section": "Processing geospatial data using JuliaGeo framework (Marteen Pronk)",
    "text": "Processing geospatial data using JuliaGeo framework (Marteen Pronk)\nJulia is a programming language that is simple to write and scriptable like Python and R, but fast like C or C++. At 10 years, it’s a young language, so the ecosystem isn’t as large and mature as you want it to be. Maarten Pronk was an early adopter of the language in his research at Deltares, a Dutch research institute. In this lecture(s) he will introduce Julia, his motivation to use it and his OSS journey. Half of the lecture will be non-spatial, while the latter half will focus on the JuliaGeo ecosystem and showcased some of the possibilities of the Julia language.\nThe JuliaGeo GitHub organization is intended primarily for the collaborative development of packages that are generally applicable across the geospatial and geosciences domains. For dealing with geospatial data, packages from the JuliaGeometry and JuliaImages organizations may also be of interest, and we will aim for good integration with those. Since the JuliaGeo organization aims to provide mostly general tools, more domain specific packages may be better suited for development in domain specific organizations. JuliaClimate is a nice example of such an organization that will be especially interesting to climate, atmosphere and ocean scientists. EcoJulia also provides some tools for generating and downloading spatial data sets, with a focus on ecological applications.\nGitHub repository: https://github.com/evetion/OGH2023"
  },
  {
    "objectID": "index.html#cloud-based-analysis-of-earth-observation-data-using-openeo-platform-r-and-python-edzer-pebesma",
    "href": "index.html#cloud-based-analysis-of-earth-observation-data-using-openeo-platform-r-and-python-edzer-pebesma",
    "title": "OpenGeoHub Summer School 2023",
    "section": "Cloud-based analysis of Earth Observation data using openEO Platform, R and Python (Edzer Pebesma)",
    "text": "Cloud-based analysis of Earth Observation data using openEO Platform, R and Python (Edzer Pebesma)\nopenEO Platform holds a large amount of free and open as well as commercial Earth Observation (EO) data which can be accessed and analysed with openEO, an open API that enables cloud computing and EO data access in a unified and reproducible way. Additionally, client libraries are available in R, Python and Javascript. A JupterLab environment and the Web Editor, a graphical interface, allow a direct and interactive development of processing workflows. The platform is developed with a strong user focus and various use cases have been implemented to illustrate the platform capabilities. Currently, three federated backends support the analysis of EO data from pixel to continental scale.\n\nThe future evolution of openEO Platform in terms of data availability and processing capabilities closely linked to community requirements, facilitated by feature requests from users who design their workflows for environmental monitoring and reproducible research purposes. This presentation provides an overview of the completed use cases, the newly added functionalities such as user code sharing, and user interface updates based on the new use cases and user requests. openEO Platform exemplifies how the processing and analysing large amounts of EO data to meaningful information products is becoming easier and largely compliant with FAIR data principles supporting the EO community at large.\nopenEO documentation: https://docs.openeo.cloud/\nGitHub repository: https://github.com/edzer/OGH23\nEnlace a la grabación en Youtube: parte 1, parte 2"
  },
  {
    "objectID": "index.html#environmental-analysis-using-satellite-image-time-series-ewa-grabska-szwagrzyk",
    "href": "index.html#environmental-analysis-using-satellite-image-time-series-ewa-grabska-szwagrzyk",
    "title": "OpenGeoHub Summer School 2023",
    "section": "Environmental analysis using satellite image time series (Ewa Grabska-Szwagrzyk)",
    "text": "Environmental analysis using satellite image time series (Ewa Grabska-Szwagrzyk)\nSatellite imagery time series offer a powerful means to detect and analyze both short- and long-term changes in the environment. In particular, the availability of open-access data from missions like Landsat (since 1972) and Sentinel (since 2015) has significantly enhanced our ability to study these changes. This workshop aims to explore the use of time series of indices derived from satellite imagery for analyzing various types of land cover changes using the programming language R. The workshop will cover essential preprocessing steps, including outlier removal and handling missing observations, to ensure the quality of the data. Participants will learn how to effectively model time series using different methods. Additionally, the workshop will provide insights into detecting trends and breaks within the time series data. The analysis will focus on a range of objects and encompass both abrupt and gradual changes. Examples of the types of changes that will be explored include urban growth or vegetation succession.\nMaterial del curso: https://egrabska.github.io/OGH2023/\nGitHub repository: https://github.com/egrabska/OGH2023\nEnlace a la grabación en Youtube: parte 1, parte 2"
  },
  {
    "objectID": "index.html#spatial-ml-model-assessment-and-interpretation-alexander-brenning",
    "href": "index.html#spatial-ml-model-assessment-and-interpretation-alexander-brenning",
    "title": "OpenGeoHub Summer School 2023",
    "section": "Spatial ML model assessment and interpretation (Alexander Brenning)",
    "text": "Spatial ML model assessment and interpretation (Alexander Brenning)\nWhile significant progress has been made towards explaining black-box machine-learning (ML) models, there is still a distinct lack of diagnostic tools that elucidate the spatial behaviour of ML models in terms of predictive skill and variable importance. This contribution proposes spatial prediction error profiles (SPEPs) and spatial variable importance profiles (SVIPs) as novel model-agnostic assessment and interpretation tools for spatial prediction models with a focus on prediction distance. Their suitability is demonstrated in two case studies representing a regionalization task in an environmental-science context, and a classification task from remotely-sensed land cover classification. In these case studies, the SPEPs and SVIPs of geostatistical methods, linear models, random forest, and hybrid algorithms show striking differences but also relevant similarities. Limitations of related cross-validation techniques are outlined, and the case is made that modelers should focus their model assessment and interpretation on the intended spatial prediction horizon. The range of autocorrelation, in contrast, is not a suitable criterion for defining spatial cross-validation test sets. The novel diagnostic tools enrich the toolkit of spatial data science, and may improve ML model interpretation, selection, and design.\nGitHub repository: https://github.com/alexanderbrenning/ogh23_ml\nEnlace a la grabación en Youtube: parte 1, parte 2"
  },
  {
    "objectID": "index.html#tools-and-packages-to-query-and-process-sentinel-1-and-sentinel-2-data-with-r-and-python-lorena-abad",
    "href": "index.html#tools-and-packages-to-query-and-process-sentinel-1-and-sentinel-2-data-with-r-and-python-lorena-abad",
    "title": "OpenGeoHub Summer School 2023",
    "section": "Tools and packages to query and process Sentinel-1 and Sentinel-2 data with R and Python (Lorena Abad)",
    "text": "Tools and packages to query and process Sentinel-1 and Sentinel-2 data with R and Python (Lorena Abad)\nThis session focuses on the products from the ESA Copernicus program Sentinel-1 and Sentinel-2. These products can be freely accessed in several manners and through different portals. We will take a look at packages to query the data you need for your analyses using Python and R, switching between platforms when relevant. An introduction on how to process Sentinel data with both platforms will also be covered focusing on the particularities of the sensors.\nFor Sentinel-1 data access, we will use the ASF Data Service to query data. There is no need for credentials for querying the data but if you want to try the downloading steps, you will need Earthdata Login credentials.\nMaterial del curso: https://loreabad6.github.io/ogh23/\nGitHub repository: https://github.com/loreabad6/ogh23\nEnlace a la grabación en Youtube: parte 1, parte 2"
  },
  {
    "objectID": "index.html#processing-large-openstreetmap-datasets-for-geocomputational-research-robin-lovelace",
    "href": "index.html#processing-large-openstreetmap-datasets-for-geocomputational-research-robin-lovelace",
    "title": "OpenGeoHub Summer School 2023",
    "section": "Processing large OpenStreetMap datasets for geocomputational research (Robin Lovelace)",
    "text": "Processing large OpenStreetMap datasets for geocomputational research (Robin Lovelace)\nOpenStreetMap (OSM) is a free and openly editable map of the world. Like Wikipedia and unlike government or corperation maintained datasets, OSM is created and maintained by a community of volunteers, making it the premier decentralized and fastest evolving source of geographic vector\ndata focussed on features relevant to human activity (e.g. roads, buildings, cafes) on planet Earth. Unlike Wikipedia, every data point in OSM has a geographic location and attributes must be structured as key-value pairs. OSM is a rich source of data for geocomputational research, but the decentralized nature of the project and the sheer volume of data. 'Planet.osm' now has more nodes than there are people on Earth, with more than 8 billion nodes, and the rate of data creation is increasing as the community grows, to 10 million users in early 2023. The size and rapid evolution of OSM are great strengths, democratising geographic knowledge and ensuring resilience. However, these features can make it difficult to work with OSM data. This lecture will provide an introduction to working with OSM and will cover the following:\n\nHow and where to download OSM data.\nHow to process small amounts of OSM data using the osmdata R package.\nHow to process large OSM 'extracts' data with the osmextract R package (documentation).\nOther command line tools for working with OSM data, including the mature and widely used osmium tool, the pyrosm Python package and the osm2streets web application and Rust codebase.\n\nFinally, the lecture will outline ideas for using OSM data. It will conclude with a call to action, inspiring the use of this rich resource to support policy objectives such as the fast and fair decarbonisation of the global economy as societies transition away from inefficient, polluting and costly fossil fuels.\nMaterial del curso: https://ogh23.robinlovelace.net/osm\nGitHub repository: https://github.com/robinlovelace/opengeohub2023"
  },
  {
    "objectID": "index.html#progress-in-modernizing-and-replacing-infrastructure-packages-in-r-spatial-workflows-roger-bivand",
    "href": "index.html#progress-in-modernizing-and-replacing-infrastructure-packages-in-r-spatial-workflows-roger-bivand",
    "title": "OpenGeoHub Summer School 2023",
    "section": "Progress in modernizing and replacing infrastructure packages in R-spatial workflows (Roger Bivand)",
    "text": "Progress in modernizing and replacing infrastructure packages in R-spatial workflows (Roger Bivand)\nUntil June 2023, maintainers of legacy packages using rgdal, rgeos and/or maptools were encouraged to migrate to sf/stars or terra, as described in https://github.com/r-spatial/evolution and blogs listed there: https://r-spatial.org/r/2022/04/12/evolution.html, https://r-spatial.org/r/2022/12/14/evolution2.html, https://r-spatial.org/r/2023/04/10/evolution3.html.\nIn June 2023, sp switches from using rgdal by default for sp::CRS and sp::spTransform to using sf functionality by default.\nFrom October 2023, retiring packages rgdal, rgeos and maptools will be archived on CRAN. This means that residual installations of retiring packages will continue for R 4.2 and R 4.3, but will not be updated after October 2023, nor will they be available for R 4.4.\nThe workshop will present current status, and may assist participants with affected workflows to adapt; the same applies to key affected packages needed in participants’ workflows. Participants are invited to contact the presenter with practical ideas to packages to adapt, and time may also be used to prepare non-maintainer update candidates for non-responsive packages. The count of affected packages was over 800, but the severity of the impact of the withdrawal of the retiring packages varies by the dependency category, strong dependence as Depends or Imports, weak dependence as Suggests.\nMaterial del curso: https://r-spatial.github.io/evolution/ogh23_bivand.html\nGitHub repository: https://github.com/r-spatial/evolution"
  },
  {
    "objectID": "index.html#parallelization-of-geoprocessing-workflows-in-grass-gis-and-python-caitlin-haedrich",
    "href": "index.html#parallelization-of-geoprocessing-workflows-in-grass-gis-and-python-caitlin-haedrich",
    "title": "OpenGeoHub Summer School 2023",
    "section": "Parallelization of geoprocessing workflows in GRASS GIS and Python (Caitlin Haedrich)",
    "text": "Parallelization of geoprocessing workflows in GRASS GIS and Python (Caitlin Haedrich)\nHigh-resolution, continental-scale modeling enabled by modern, massive datasets, requires development of scalable geoprocessing workflows. To enable participants to effectively use available computational resources (laptop, desktop, institutional HPC), we will introduce basic parallelization concepts such as parallelization efficiency and scaling. We will explain various approaches to parallelization in GRASS GIS, an open source geoprocessing engine, that rely on OpenMP, Python and Bash.\n\nIn the hands-on part, participants will speed up an urban growth model by parallelizing different parts of this complex geoprocessing workflow using techniques that are easily applicable to a wide range of analyses and computational resources. The workshop will be running in a Jupyter Notebook environment using GRASS GIS Python API to run GRASS tools and visualize results of the analysis in a reproducible way.\nParticipants will be able to either run the workshop on their laptops (see instructions) or in a cloud environment (using WholeTale, no installation required).\nGitHub repository: https://github.com/ncsu-geoforall-lab/opengeohub-2023"
  },
  {
    "objectID": "index.html#xcube-for-spatiotemporal-data-analysis-and-visualization-alicja-balfanz",
    "href": "index.html#xcube-for-spatiotemporal-data-analysis-and-visualization-alicja-balfanz",
    "title": "OpenGeoHub Summer School 2023",
    "section": "xcube for spatiotemporal data analysis and visualization (Alicja Balfanz)",
    "text": "xcube for spatiotemporal data analysis and visualization (Alicja Balfanz)\nxcube is an open-source xarray-based Python package and toolkit that has been developed to provide Earth observation (EO) data in an analysis-ready form to users. xcube achieves this by carefully converting EO data sources into self-contained data cubes that can be published in the cloud.\nIn this session you will learn about the ecosystem around xcube, which allows to access different data sources and turning the inputs into data cubes. These data cubes can then be easily used for spatiotemporal data analysis and visualization. After a brief introduction about the software components, we will go step by step though some example Jupyter notebooks and finally we will dive into a hands-on session with a little challenge.\nFor the session you will need a laptop with an internet connection, some basic knowledge about Python and already installed miniconda which is used to download the necessary Python packages for the session. Prior experience with Jupyter notebooks will be helpful, but not mandatory."
  },
  {
    "objectID": "index.html#data-engineering-for-mobility-data-science-with-python-and-dvc-anita-graser",
    "href": "index.html#data-engineering-for-mobility-data-science-with-python-and-dvc-anita-graser",
    "title": "OpenGeoHub Summer School 2023",
    "section": "Data engineering for Mobility Data Science (with Python and DVC) (Anita Graser)",
    "text": "Data engineering for Mobility Data Science (with Python and DVC) (Anita Graser)\nThis session introduces MovingPandas and DVC for Mobility Data Science.\nMovingPandas is a Python library for the analysis and visualization of movement data. It is built on top of GeoPandas and provides functions to analyze, manipulate and plot trajectories. To get a better idea of the type of analytics that MovingPandas supports, visit: https://movingpandas.org/examples\nDVC is a data version control (and machine learning experiment tracking) library. It follows a similar logic to source code version control systems (such as Git) and is typically used together with Git to keep track of data and experiments while Git keeps track of the source code. In this session, we will use DVC to keep track of our movement data analytics workflow. Participants are expected to come prepared with a working MovingPandas & DVC Python environment. Basic previous experience with (Geo)Pandas and version control systems (i.e. how pull, commit, push works in Git) is expected.\nGitHub repository: https://github.com/movingpandas/movingpandas-examples/tree/opengeohub2023"
  },
  {
    "objectID": "index.html#mapping-explanation---python-toolchaing-for-spatial-interpretative-machine-learning-jarosław-jasiewicz",
    "href": "index.html#mapping-explanation---python-toolchaing-for-spatial-interpretative-machine-learning-jarosław-jasiewicz",
    "title": "OpenGeoHub Summer School 2023",
    "section": "Mapping explanation - Python toolchaing for spatial interpretative machine learning (Jarosław Jasiewicz)",
    "text": "Mapping explanation - Python toolchaing for spatial interpretative machine learning (Jarosław Jasiewicz)\nThe course will present applications of interpretive machine learning methods to geospatial analysis. Interpretive machine learning is a new branch of machine learning that allows the decomposition of black box models. It allows complex, non-linear models to explain the criteria that lead to a result. In the case of geospatial data, it can be used to search for patterns of spatial explanatory factors. The course covers the entire toolchain from data preparation, model training, and the data transformation process, through data analysis and interpretation of the results, to spatial visualization. The toolchain includes tools such as the shap library, selected components of the scikit-learn, geopandas, and matplotlib packages. The course includes a theoretical introduction to interpretive machine learning and how it can be applied to geospatial data. The practical part is built around analysing the U.S. presidential election results Clinton vs. Trump. In the first step, explanatory variables are collected and transformed into shapely numbers. The data transformed in this way will determine the relevance of the explanatory variables and their actual impact on the election outcome in each county. The advantage of shapely numbers is that the variables are automatically weighted, allowing for efficient clustering. The shapely numbers and their clustering results reveal interesting spatial patterns in the electoral process.\n\nVideo: Sharing your geospatial knowledge in the open (Jakub Nowosad)"
  }
]